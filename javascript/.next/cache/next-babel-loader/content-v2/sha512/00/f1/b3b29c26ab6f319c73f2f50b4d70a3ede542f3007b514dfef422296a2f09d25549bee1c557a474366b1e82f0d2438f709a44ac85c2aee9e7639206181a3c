{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers } from 'redux';\nimport { fork } from 'redux-saga/effects';\nimport { HYDRATE } from 'next-redux-wrapper';\nimport themeSaga, { themeReducer } from './theme';\nexport const combinedReducer = combineReducers({\n  theme: themeReducer // ANOTHER REDUCER\n\n});\nexport const rootReducer = (state, action) => {\n  if (action.type === HYDRATE) {\n    const nextState = _objectSpread(_objectSpread({}, state), action.payload);\n\n    if (state.theme) nextState.theme = state.theme;\n    return nextState;\n  }\n\n  return combinedReducer(state, action);\n};\nexport default function* rootSaga() {\n  yield fork(themeSaga); // yield fork(ANOTHER_REDUCER)\n}","map":{"version":3,"sources":["/home/sung/dev/next-red-emo-mat/src/lib/redux/modules/index.js"],"names":["combineReducers","fork","HYDRATE","themeSaga","themeReducer","combinedReducer","theme","rootReducer","state","action","type","nextState","payload","rootSaga"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,oBAArB;AAEA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,SAAP,IAAoBC,YAApB,QAAwC,SAAxC;AAEA,OAAO,MAAMC,eAAe,GAAGL,eAAe,CAAC;AAC9CM,EAAAA,KAAK,EAAEF,YADuC,CAE9C;;AAF8C,CAAD,CAAvC;AAKP,OAAO,MAAMG,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7C,MAAIA,MAAM,CAACC,IAAP,KAAgBR,OAApB,EAA6B;AAC5B,UAAMS,SAAS,mCACXH,KADW,GAEXC,MAAM,CAACG,OAFI,CAAf;;AAIA,QAAIJ,KAAK,CAACF,KAAV,EAAiBK,SAAS,CAACL,KAAV,GAAkBE,KAAK,CAACF,KAAxB;AACjB,WAAOK,SAAP;AACA;;AACD,SAAON,eAAe,CAACG,KAAD,EAAQC,MAAR,CAAtB;AACA,CAVM;AAYP,eAAe,UAAUI,QAAV,GAAqB;AACnC,QAAMZ,IAAI,CAACE,SAAD,CAAV,CADmC,CAEnC;AACA","sourcesContent":["import { combineReducers } from 'redux';\nimport { fork } from 'redux-saga/effects';\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport themeSaga, { themeReducer } from './theme';\n\nexport const combinedReducer = combineReducers({\t\n\ttheme: themeReducer\n\t// ANOTHER REDUCER\n});\n\nexport const rootReducer = (state, action) => {\n\tif (action.type === HYDRATE) {\n\t\tconst nextState = {\n\t\t\t...state, // use previous state\n\t\t\t...action.payload // apply delta from hydration\n\t\t};\n\t\tif (state.theme) nextState.theme = state.theme;\n\t\treturn nextState;\n\t}\n\treturn combinedReducer(state, action);\n};\n\nexport default function* rootSaga() {\n\tyield fork(themeSaga);\n\t// yield fork(ANOTHER_REDUCER)\n}\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"/home/sung/dev/next-red-emo/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/home/sung/dev/next-red-emo/src/pages/_app.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Head from 'next/head';\nimport ReactDOM from 'react-dom';\nimport { AppContext, AppProps } from 'next/app';\nimport { useRouter } from 'next/router';\nimport { ThemeProvider, useTheme, css } from '@emotion/react';\nimport { lightTheme, darkTheme, tealTheme } from 'assets/jss/themes';\nimport { wrapper } from 'lib/redux/store';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { jsx as ___EmotionJSX } from \"@emotion/react\";\n\nvar MyApp = function MyApp(_ref) {\n  _s();\n\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _useSelector = useSelector(function (state) {\n    return {\n      theme: state.theme\n    };\n  }, shallowEqual),\n      theme = _useSelector.theme;\n\n  var emotionTheme = useTheme();\n  var router = useRouter();\n  React.useEffect(function () {}, []);\n  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }\n  }, ___EmotionJSX(\"meta\", {\n    charSet: \"UTF-8\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }), ___EmotionJSX(\"meta\", {\n    httpEquiv: \"x-ua-compatible\",\n    content: \"ie=edge\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }), ___EmotionJSX(\"meta\", {\n    name: \"viewport\",\n    content: \"width=device-width, initial-scale=1, minimum-scale=1, shrink-to-fit=no\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }), ___EmotionJSX(\"meta\", {\n    name: \"description\",\n    content: \"next-red-emo\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }), ___EmotionJSX(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, \" \\u2764\\uFE0F \", \"next-red-emo\"), ___EmotionJSX(\"meta\", {\n    name: \"theme-color\",\n    content: \"#008080\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  })), ___EmotionJSX(ThemeProvider, {\n    theme: // if theme is null or undefined, default to light\n    theme.theme == null ? lightTheme : theme.theme === 'dark' ? darkTheme : tealTheme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }\n  }, ___EmotionJSX(Component, _extends({}, pageProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 6\n    }\n  }))));\n}; // this disables the ability to perform automatic static optimization,\n// causing every page in the app to be server-side rendered.\n// (cf. https://nextjs.org/docs/basic-features/typescript#custom-app)\n// MyApp.getInitialProps = async ({ Component, router, ctx }: AppContext) => {\n// \tlet pageProps = {};\n// \t// calls page's `getInitialProps` and fills `appProps.pageProps`\n// \tif (Component.getInitialProps) {\n// \t\tpageProps = await Component.getInitialProps(ctx);\n// \t}\n// \treturn { pageProps };\n// };\n// export default wrapper.withRedux(MyApp);\n\n\n_s(MyApp, \"UGbiTdcfN/Chcqe5Mvug+nvnJeg=\", false, function () {\n  return [useSelector, useTheme, useRouter];\n});\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/home/sung/dev/next-red-emo/src/pages/_app.jsx"],"names":["React","Head","ReactDOM","AppContext","AppProps","useRouter","ThemeProvider","useTheme","css","lightTheme","darkTheme","tealTheme","wrapper","useSelector","shallowEqual","MyApp","Component","pageProps","state","theme","emotionTheme","router","useEffect"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,UAArC;AAEA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,GAAlC,QAA6C,gBAA7C;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,SAAhC,QAAiD,mBAAjD;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,aAA1C;;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAA8B;AAAA;;AAAA,MAA3BC,SAA2B,QAA3BA,SAA2B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,qBACzBJ,WAAW,CAC5B,UAACK,KAAD;AAAA,WAAY;AACXC,MAAAA,KAAK,EAAED,KAAK,CAACC;AADF,KAAZ;AAAA,GAD4B,EAI5BL,YAJ4B,CADc;AAAA,MACnCK,KADmC,gBACnCA,KADmC;;AAQ3C,MAAMC,YAAY,GAAGb,QAAQ,EAA7B;AACA,MAAMc,MAAM,GAAGhB,SAAS,EAAxB;AAEAL,EAAAA,KAAK,CAACsB,SAAN,CAAgB,YAAM,CACrB,CADD,EACG,EADH;AAGA,SACC,oCACC,cAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAM,IAAA,OAAO,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEC;AAAM,IAAA,SAAS,EAAC,iBAAhB;AAAkC,IAAA,OAAO,EAAC,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,EAIC;AACC,IAAA,IAAI,EAAC,UADN;AAEC,IAAA,OAAO,EAAC,wEAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,EAQC;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAC,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARD,EASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCATD,EAUC;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVD,CADD,EAaC,cAAC,aAAD;AACC,IAAA,KAAK,EACJ;AACAH,IAAAA,KAAK,CAACA,KAAN,IAAe,IAAf,GAAsBV,UAAtB,GACAU,KAAK,CAACA,KAAN,KAAgB,MAAhB,GAAyBT,SAAzB,GAAqCC,SAJvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAkBE,cAAC,SAAD,eAAeM,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlBF,CAbD,CADD;AAqCA,CAnDD,C,CAqDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;GAnEMF,K;UACaF,W,EAOGN,Q,EACNF,S;;;KATVU,K;AAoEN,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport Head from 'next/head';\nimport ReactDOM from 'react-dom';\nimport { AppContext, AppProps } from 'next/app';\n\nimport { useRouter } from 'next/router';\n\nimport { ThemeProvider, useTheme, css } from '@emotion/react';\nimport { lightTheme, darkTheme, tealTheme } from 'assets/jss/themes'\nimport { wrapper } from 'lib/redux/store';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst MyApp = ({ Component, pageProps }) => {\n\tconst { theme } = useSelector(\n\t\t(state) => ({\n\t\t\ttheme: state.theme\n\t\t}),\n\t\tshallowEqual\n\t);\n\n\tconst emotionTheme = useTheme();\n\tconst router = useRouter();\n\n\tReact.useEffect(() => {\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t<Head>\n\t\t\t\t<meta charSet=\"UTF-8\" />\n\t\t\t\t<meta httpEquiv=\"x-ua-compatible\" content=\"ie=edge\" />\n\t\t\t\t{/* <meta httpEquiv=\"content-type\" content=\"text/html\" /> */}\n\t\t\t\t<meta\n\t\t\t\t\tname=\"viewport\"\n\t\t\t\t\tcontent=\"width=device-width, initial-scale=1, minimum-scale=1, shrink-to-fit=no\"\n\t\t\t\t/>\n\t\t\t\t<meta\tname=\"description\" content=\"next-red-emo\"\t/>\n\t\t\t\t<title>{` ❤️ `}next-red-emo</title>\n\t\t\t\t<meta name=\"theme-color\" content=\"#008080\" />\n\t\t\t</Head>\n\t\t\t<ThemeProvider \n\t\t\t\ttheme={\n\t\t\t\t\t// if theme is null or undefined, default to light\n\t\t\t\t\ttheme.theme == null ? lightTheme :\n\t\t\t\t\ttheme.theme === 'dark' ? darkTheme : tealTheme\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t\t\n\t\t\t\t\t{/* <Header\n\t\t\t\t\t\tfixed\n\t\t\t\t\t\tbrand=\"Community\"\n\t\t\t\t\t\tcolor={HeaderColors.transparent}\n\t\t\t\t\t\tchangeColorOnScroll={{\n\t\t\t\t\t\t\theight: 200,\n\t\t\t\t\t\t\tcolor: HeaderColors.teal\n\t\t\t\t\t\t}}\n\t\t\t\t\t/> */}\n\n\t\t\t\t\t<Component {...pageProps} />\n\n\t\t\t</ThemeProvider>\n\t\t</>\n\t);\n};\n\n// this disables the ability to perform automatic static optimization,\n// causing every page in the app to be server-side rendered.\n// (cf. https://nextjs.org/docs/basic-features/typescript#custom-app)\n// MyApp.getInitialProps = async ({ Component, router, ctx }: AppContext) => {\n// \tlet pageProps = {};\n\n// \t// calls page's `getInitialProps` and fills `appProps.pageProps`\n// \tif (Component.getInitialProps) {\n// \t\tpageProps = await Component.getInitialProps(ctx);\n// \t}\n\n// \treturn { pageProps };\n// };\n\n// export default wrapper.withRedux(MyApp);\nexport default MyApp;"]},"metadata":{},"sourceType":"module"}
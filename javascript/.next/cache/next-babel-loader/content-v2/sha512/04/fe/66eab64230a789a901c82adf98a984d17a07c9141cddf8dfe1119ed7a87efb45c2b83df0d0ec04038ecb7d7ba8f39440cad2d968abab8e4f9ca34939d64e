{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createAction, createReducer, ActionType } from 'typesafe-actions';\nimport { takeLatest } from 'redux-saga/effects';\nexport const setTheme = createAction('SET_THEME', target => target)(); // THEME SAGA\n\nexport default function* themeSaga() {\n  yield takeLatest(setTheme, themeSaga);\n}\nexport const themeReducer = createReducer(initialState).handleAction(setTheme, (state, action) => _objectSpread(_objectSpread({}, state), {}, {\n  theme: action.payload\n}));","map":{"version":3,"sources":["/home/sung/dev/next-red-emo/src/lib/redux/modules/theme.js"],"names":["createAction","createReducer","ActionType","takeLatest","setTheme","target","themeSaga","themeReducer","initialState","handleAction","state","action","theme","payload"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,UAAtC,QAAwD,kBAAxD;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,OAAO,MAAMC,QAAQ,GAAGJ,YAAY,CAAC,WAAD,EAAeK,MAAD,IAAYA,MAA1B,CAAZ,EAAjB,C,CAEP;;AACA,eAAe,UAAUC,SAAV,GAAsB;AACpC,QAAMH,UAAU,CAACC,QAAD,EAAWE,SAAX,CAAhB;AACA;AAED,OAAO,MAAMC,YAAY,GAAGN,aAAa,CAACO,YAAD,CAAb,CAC1BC,YAD0B,CACbL,QADa,EACH,CAACM,KAAD,EAAQC,MAAR,qCACpBD,KADoB;AAEvBE,EAAAA,KAAK,EAAED,MAAM,CAACE;AAFS,EADG,CAArB","sourcesContent":["import { createAction, createReducer, ActionType } from 'typesafe-actions';\nimport { takeLatest } from 'redux-saga/effects';\n\nexport const setTheme = createAction('SET_THEME', (target) => target)();\n\n// THEME SAGA\nexport default function* themeSaga() {\n\tyield takeLatest(setTheme, themeSaga);\n}\n\nexport const themeReducer = createReducer(initialState)\n\t.handleAction(setTheme, (state, action) => ({\n\t\t...state,\n\t\ttheme: action.payload\n\t}));\n"]},"metadata":{},"sourceType":"module"}
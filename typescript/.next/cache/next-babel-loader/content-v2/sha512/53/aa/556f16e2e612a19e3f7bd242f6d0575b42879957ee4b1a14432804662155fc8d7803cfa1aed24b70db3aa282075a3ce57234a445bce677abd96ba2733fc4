{"ast":null,"code":"import _toConsumableArray from \"/home/sung/dev/next-red-emo-mat/typescript/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { applyMiddleware, createStore } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga, { rootReducer } from './modules';\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware).concat([logger])));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n}; // create a makeStore function\n\n\nvar makeStore = function makeStore(context) {\n  var _localStorage;\n\n  // 1: Create the middleware\n  var sagaMiddleware = createSagaMiddleware();\n  var KEYNAME = 'NEXT-RED-EMO-MAT-STATE'; // if KEYNAME exists in LocalStorage, load it\n\n  var preloadedState = true && (_localStorage = localStorage) !== null && _localStorage !== void 0 && _localStorage.getItem(KEYNAME) ? JSON.parse(localStorage.getItem(KEYNAME)) : {}; // 2: Add an extra parameter for applying middleware:\n\n  var store = createStore(rootReducer, preloadedState, bindMiddleware([sagaMiddleware])); // 3: Run sagas on server\n\n  store.sagaTask = sagaMiddleware.run(rootSaga); // optional: subscribe to store events\n\n  store.subscribe(function () {\n    return true && localStorage.setItem(KEYNAME, JSON.stringify(store.getState()));\n  });\n  return store;\n}; // export an assembled wrapper\n\n\nexport var wrapper = createWrapper(makeStore, {\n  debug: true\n});","map":{"version":3,"sources":["/home/sung/dev/next-red-emo-mat/typescript/src/lib/redux/store.js"],"names":["applyMiddleware","createStore","createWrapper","composeWithDevTools","logger","createSagaMiddleware","rootSaga","rootReducer","bindMiddleware","middleware","makeStore","context","sagaMiddleware","KEYNAME","preloadedState","localStorage","getItem","JSON","parse","store","sagaTask","run","subscribe","setItem","stringify","getState","wrapper","debug"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,aAAT,QAA+B,oBAA/B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,IAAmBC,WAAnB,QAAsC,WAAtC;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD,EAAgB;AACtC,YAA2C;AAC1C,WAAON,mBAAmB,CAACH,eAAe,MAAf,4BAAmBS,UAAnB,UAA+BL,MAA/B,GAAD,CAA1B;AACA;;AACD,SAAOJ,eAAe,MAAf,4BAAmBS,UAAnB,EAAP;AACA,CALD,C,CAOA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAa;AAAA;;AAC9B;AACA,MAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AAEA,MAAMQ,OAAO,GAAG,wBAAhB,CAJ8B,CAM9B;;AACA,MAAMC,cAAc,GACnB,yBAAiCC,YAAjC,0CAAiC,cAAcC,OAAd,CAAsBH,OAAtB,CAAjC,GACGI,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqBH,OAArB,CAAX,CADH,GAEG,EAHJ,CAP8B,CAY9B;;AACA,MAAMM,KAAK,GAAGlB,WAAW,CACxBM,WADwB,EAExBO,cAFwB,EAGxBN,cAAc,CAAC,CAACI,cAAD,CAAD,CAHU,CAAzB,CAb8B,CAmB9B;;AACAO,EAAAA,KAAK,CAACC,QAAN,GAAiBR,cAAc,CAACS,GAAf,CAAmBf,QAAnB,CAAjB,CApB8B,CAsB9B;;AACAa,EAAAA,KAAK,CAACG,SAAN,CAAgB;AAAA,WACf,QACAP,YAAY,CAACQ,OAAb,CAAqBV,OAArB,EAA8BI,IAAI,CAACO,SAAL,CAAeL,KAAK,CAACM,QAAN,EAAf,CAA9B,CAFe;AAAA,GAAhB;AAKA,SAAON,KAAP;AACA,CA7BD,C,CA+BA;;;AACA,OAAO,IAAMO,OAAO,GAAGxB,aAAa,CAACQ,SAAD,EAAY;AAAEiB,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport { createWrapper  } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga, { rootReducer } from './modules';\n\nconst bindMiddleware = (middleware) => {\n\tif (process.env.NODE_ENV !== 'production') {\n\t\treturn composeWithDevTools(applyMiddleware(...middleware, logger));\n\t}\n\treturn applyMiddleware(...middleware);\n};\n\n// create a makeStore function\nconst makeStore = (context) => {\n\t// 1: Create the middleware\n\tconst sagaMiddleware = createSagaMiddleware();\n\n\tconst KEYNAME = 'NEXT-RED-EMO-MAT-STATE';\n\n\t// if KEYNAME exists in LocalStorage, load it\n\tconst preloadedState =\n\t\ttypeof window !== 'undefined' && localStorage?.getItem(KEYNAME)\n\t\t\t? JSON.parse(localStorage.getItem(KEYNAME))\n\t\t\t: {};\n\n\t// 2: Add an extra parameter for applying middleware:\n\tconst store = createStore(\n\t\trootReducer,\n\t\tpreloadedState,\n\t\tbindMiddleware([sagaMiddleware])\n\t);\n\n\t// 3: Run sagas on server\n\tstore.sagaTask = sagaMiddleware.run(rootSaga);\n\n\t// optional: subscribe to store events\n\tstore.subscribe(() =>\n\t\ttypeof window !== 'undefined' &&\n\t\tlocalStorage.setItem(KEYNAME, JSON.stringify(store.getState()))\n\t);\n\n\treturn store;\n};\n\n// export an assembled wrapper\nexport const wrapper = createWrapper(makeStore, { debug: true });\n"]},"metadata":{},"sourceType":"module"}
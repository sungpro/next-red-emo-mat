{"ast":null,"code":"import _defineProperty from \"/home/sung/dev/next-red-emo-mat/typescript/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/sung/dev/next-red-emo-mat/typescript/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(themeSaga);\n\nimport { createAction, createReducer } from 'typesafe-actions';\nimport { takeLatest } from 'redux-saga/effects';\nvar initialState = {\n  theme: 'light'\n};\nexport var setTheme = createAction('SET_THEME', function (target) {\n  return target;\n})();\n// THEME SAGA\nexport default function themeSaga() {\n  return _regeneratorRuntime.wrap(function themeSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest(setTheme, themeSaga);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport var themeReducer = createReducer(initialState).handleAction(setTheme, function (state, action) {\n  return _objectSpread(_objectSpread({}, state), {}, {\n    theme: action.payload\n  });\n});","map":{"version":3,"sources":["/home/sung/dev/next-red-emo-mat/typescript/src/lib/redux/modules/theme.ts"],"names":["themeSaga","createAction","createReducer","takeLatest","initialState","theme","setTheme","target","themeReducer","handleAction","state","action","payload"],"mappings":";;;;;;;oDAcyBA,S;;AAdzB,SAASC,YAAT,EAAuBC,aAAvB,QAAwD,kBAAxD;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAMA,IAAMC,YAAwB,GAAG;AAACC,EAAAA,KAAK,EAAE;AAAR,CAAjC;AAEA,OAAO,IAAMC,QAAQ,GAAGL,YAAY,CAAC,WAAD,EAAc,UAACM,MAAD;AAAA,SAAwBA,MAAxB;AAAA,CAAd,CAAZ,EAAjB;AAIP;AACA,eAAe,SAAUP,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMG,UAAU,CAACG,QAAD,EAAWN,SAAX,CAAhB;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIf,OAAO,IAAMQ,YAAY,GAAGN,aAAa,CAA2BE,YAA3B,CAAb,CAC1BK,YAD0B,CACbH,QADa,EACH,UAACI,KAAD,EAAQC,MAAR;AAAA,yCACpBD,KADoB;AAEvBL,IAAAA,KAAK,EAAEM,MAAM,CAACC;AAFS;AAAA,CADG,CAArB","sourcesContent":["import { createAction, createReducer, ActionType } from 'typesafe-actions';\nimport { takeLatest } from 'redux-saga/effects';\n\nexport type ThemeTypes = 'light' | 'dark' | 'teal';\n\ninterface ThemeState { theme: ThemeTypes }\n\nconst initialState: ThemeState = {theme: 'light' }\n\nexport const setTheme = createAction('SET_THEME', (target: ThemeTypes) => target)();\n\nexport type ThemeActions = ActionType<typeof setTheme>;\n\n// THEME SAGA\nexport default function* themeSaga() {\n\tyield takeLatest(setTheme, themeSaga);\n}\n\nexport const themeReducer = createReducer<ThemeState, ThemeActions>(initialState)\n\t.handleAction(setTheme, (state, action) => ({\n\t\t...state,\n\t\ttheme: action.payload\n\t}));\n"]},"metadata":{},"sourceType":"module"}